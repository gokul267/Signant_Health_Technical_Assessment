###############################################################################################
Test Approach for UI testing:
----------------------------

UI test automation is conducted on Google chrome browser and Robot framework with selenium library is selected, since the results from the exploratory test results are consistent across three browsers tested such as Google Chrome, Mozilla Firefox and Microsoft edge

Based on acceptance criteria defined for the app, two positive test cases and four negative test cases were identified for test automation. Results from exploratory tests are used to identify the possible keywords and variables used for the test cases in Robot Framework.

Components in the automation code:
---------------------------------
  -- TestSuite.robot -> robot file to run the test cases
  -- Common.resource -> resource file includes all environment specific configuration for the automation code
  -- Keywords.resource -> resource file includes all keyworks used 
  -- TestData.resource -> resource file to include all test data as variables
  
###############################################################################################
Test Approach for API testing:
------------------------------

Pytest based testing is chosen to implement the API test automation. In my experience, this library provides many advantages in long term maintenance of test automation codebase.
	Some key benefits observed are:
		1.Easy to configure the test files, as following required naming conventions for test files is sufficient
		2.Faster execution times since it supports parallel test runs
		3.Execute a subset of test cases based on the requirements

Components in the automation code:
----------------------------------
  -- TestCases -> folder includes all the test cases built
  -- common -> folder includes the common modules used by Test cases. E.g. response_handler class and  test data

Modularity
-----------
To enable modularity for the features used in the automation, a separate constructor was built for the response messages from the demo app APIs. 
This will help to reuse common steps across all the test cases such as API calls, processing the application response, etc.
Unit tests are also configured to check the getters configured in the constructor.

###############################################################################################
Some potential gaps in the app observed:
---------------------------------------

UI and API features are not similar
	- Empty values are accepted for first name, last name and phone through API, but not when registering through UI
	
User data validation should be enabled. 
	- Any data is currently accepted in the application for names, password and phone. 

App uses deprecated functions.
	- There is an issue in api.py line 90 because iteritems() function is omitted in python 3. My environment is in python 3.9.1, so I changed the data.iteritems() as data.items() to continue with my tests. I am not sure if this bug is added intentionally.

###############################################################################################
